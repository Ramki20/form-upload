package gov.usda.fsa.fcao.flpids.fbpservice.jaxws;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.soap.SOAPFaultException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
//import org.springframework.mock.jndi.SimpleNamingContextBuilder;

/**
 * This class was created manually
 * See also FBPService class (Static Client - which was generated by wsimport) 
 * 
 * @author FCAO
 *
 */
public class FBPServiceStaticClient implements FBPConnector {
	
	private static final Logger logger = LogManager
			.getLogger(FBPServiceStaticClient.class);
	
	String fbpEndPointURL = "";
	String sitename = "";
	String username = "";
	String passwdtext = "";
	String passwddigest = "";
	
	public FBPServiceStaticClient() {
		try {
			fbpEndPointURL = JNDIUtil.lookUp(FBPWsdlInfo.FBP_INTERFACE_CONTEXT_JNDI);
			sitename = JNDIUtil.lookUp(FBPWsdlInfo.FBP_SITENAME_JNDI);
			username = JNDIUtil.lookUp(FBPWsdlInfo.FBP_USER_NAME_JNDI);
			passwdtext = "";
			passwddigest = JNDIUtil.lookUp(FBPWsdlInfo.FBP_PASSWORD_DIGEST_JNDI);
		} catch (Exception e) {
			logger.error("Error in initializing FBP params :"+e.getMessage());
		}
		
	}
	
	@Override
	public DLMData getDLMData(Integer corecustomerid) throws FBPConnectorException {
		return getDLMData(fbpEndPointURL,sitename,username,passwdtext,passwddigest,corecustomerid);
	}
	
	/**
	 * @param sitename
	 * @param username
	 * @param passwdtext
	 * @param passwddigest
	 * @param corecustomerid
	 * @return
	 * @throws MalformedURLException
	 * @throws JAXBException
	 * If connection fails, let it throws FBPConnectorException to the caller. 
	 */
	@Override
	public DLMData getDLMData(String fbpEndPointURL, String sitename,
			String username, String passwdtext, String passwddigest,
			Integer corecustomerid) throws FBPConnectorException{
		FBPService fbpService = createFBPServiceInstance();
		try {
			
			GetDLMDataResult dlmDataResult = fbpService.getFBPServiceSoap().getDLMData(sitename, username, passwdtext, passwddigest, corecustomerid);
			if(dlmDataResult==null){
				logger.warn("getDLMData - No records found (possibly) in FBP for corecustomerid="+corecustomerid);
				return null;
			}

			List<Object> list = dlmDataResult.getContent();
			Object response = list.get(0);
			if (response instanceof JAXBElement) {
				JAXBElement<DLMData> jaxbElement = (JAXBElement<DLMData>) response;
				DLMData dlmData = jaxbElement.getValue();
				if(logger.isDebugEnabled()){
					logger.debug("dlmData=" + dlmData);
				}
				return dlmData;
			}else{
				throw new JAXBException("getDLMData() - Incorrect object type (Not JAXBElement): " + response.getClass());
			}
		} catch (Exception e) {
			if(recordsNotFound("getDLMData()", corecustomerid, e)){
				return null;
			}else{
				throw new FBPConnectorException("Failed to call FBP Web Service: getDLMData()", e);
			}
		}
	}

	@Override
	public DLMData getDLMYEAData(Integer corecustomerid) throws FBPConnectorException {
		return getDLMYEAData(fbpEndPointURL,sitename,username,passwdtext,passwddigest,corecustomerid);
	}

	/**
	 * @param sitename
	 * @param username
	 * @param passwdtext
	 * @param passwddigest
	 * @param corecustomerid
	 * @return
	 * @throws MalformedURLException
	 * @throws JAXBException
	 */
	@Override
	public DLMData getDLMYEAData(String fbpEndPointURL, String sitename,
			String username, String passwdtext, String passwddigest,
			Integer corecustomerid) throws FBPConnectorException{
		FBPService fbpService = createFBPServiceInstance();
		try {			
			GetDLMYEADataResult dlmDataResult = fbpService.getFBPServiceSoap().getDLMYEAData(sitename, username, passwdtext, passwddigest, corecustomerid);
			if(dlmDataResult==null){
				logger.warn("getDLMYEAData() - No records found (possibly) in FBP for corecustomerid="+corecustomerid);
				return null;
			}

			List<Object> list = dlmDataResult.getContent();
			Object response = list.get(0);
			if (response instanceof JAXBElement) {
				JAXBElement<DLMData> jaxbElement = (JAXBElement<DLMData>) response;
				DLMData dlmData = jaxbElement.getValue();
				if(logger.isDebugEnabled()){
					logger.debug("dlmData=" + dlmData);
				}
				return dlmData;
			}else{
				throw new JAXBException("getDLMYEAData() - Incorrect object type (Not JAXBElement): " + response.getClass());
			}
		} catch (Exception e) {
			if(recordsNotFound("getDLMYEAData()", corecustomerid, e)){
				return null;
			}else {
				throw new FBPConnectorException("Failed to call FBP Web Service: getDLMYEAData()", e);
			}
		}
	}
	
	@Override
	public DALRData getDALRData(Integer corecustomerid) throws FBPConnectorException {
		return getDALRData(fbpEndPointURL,sitename,username,passwdtext,passwddigest,corecustomerid);
	}
	
	/**
	 * @param sitename
	 * @param username
	 * @param passwdtext
	 * @param passwddigest
	 * @param corecustomerid
	 * @return
	 * @throws MalformedURLException
	 * @throws JAXBException
	 */
	@Override
	public DALRData getDALRData(String fbpEndPointURL, String sitename,
			String username, String passwdtext, String passwddigest,
			Integer corecustomerid) throws FBPConnectorException{
		FBPService fbpService = createFBPServiceInstance();
		try {
			GetDALRDataResult dalrDataResult = fbpService.getFBPServiceSoap().getDALRData(sitename, username, passwdtext, passwddigest, corecustomerid);
			if(dalrDataResult==null)
			{
				logger.warn("getDALRData() - No records found (possibly) in FBP for corecustomerid="+corecustomerid);
				return null;
			}

			List<Object> list = dalrDataResult.getContent();
			Object response = list.get(0);
			if (response instanceof JAXBElement) {
				JAXBElement<DALRData> jaxbElement = (JAXBElement<DALRData>) response;
				DALRData dalrData = jaxbElement.getValue();
				if(logger.isDebugEnabled()){
					logger.debug("dalrData=" + dalrData);
				}
				return dalrData;
			}
			else
			{
				throw new JAXBException("getDALRData() - Incorrect object type (Not JAXBElement): " + response.getClass());
			}
		} catch (Exception e) {
			if(recordsNotFound("getDALRData()", corecustomerid, e)){
				return null;
			}else{
				throw new FBPConnectorException("Failed to call FBP Web Service: getDALRData()", e);
			}
		}

	}
	
	@Override
	public LenderStaffData getLenderStaffData(List<Integer> inputCoreCustomerIDList) throws FBPConnectorException {
		return getLenderStaffData(fbpEndPointURL,sitename,username,passwdtext,passwddigest,inputCoreCustomerIDList);
	}
	
	/**
	 * @param sitename
	 * @param username
	 * @param passwdtext
	 * @param passwddigest
	 * @param corecustomerid
	 * @return
	 * @throws MalformedURLException
	 * @throws JAXBException
	 */
	@Override
	public LenderStaffData getLenderStaffData(String fbpEndPointURL, String sitename,
			String username, String passwdtext, String passwddigest,
			List<Integer> inputCoreCustomerIDList) throws FBPConnectorException{
		FBPService fbpService = createFBPServiceInstance();
		try {
			Map<Integer, List<LenderStaff>> mapOfLenderStaffRecords = new HashMap<Integer, List<LenderStaff>>();
			if(inputCoreCustomerIDList==null || inputCoreCustomerIDList.isEmpty())
			{
				String msg = "inputCoreCustomerIDList is null or empty. coreCustomerIDList:"+inputCoreCustomerIDList;
				logger.warn(msg);
				LenderStaffData lenderStaffData = new LenderStaffData();
				lenderStaffData.setErrorMessage(msg);
				return lenderStaffData;
			}
			ArrayOfInt arrayOfInt = new ArrayOfInt();
			for(Integer coreCustomerID: inputCoreCustomerIDList)
			{
				 // Filter out duplicates
				 if(!arrayOfInt.getInt().contains(coreCustomerID)) 
				 {
					 arrayOfInt.getInt().add(coreCustomerID);
					 //Initialize
					 mapOfLenderStaffRecords.put(coreCustomerID, new ArrayList<LenderStaff>());
				 }
			}
			
/**			Logging for debugging purposes - please do not delete the below lines. This will be helpful for debugging
		    LoggingOutInterceptor loi = new LoggingOutInterceptor(); 
		    loi.setPrettyLogging(true); 
			LoggingInInterceptor lii = new LoggingInInterceptor(); 
			lii.setPrettyLogging(true); 

			org.apache.cxf.endpoint.Client client = org.apache.cxf.frontend.ClientProxy.getClient(fbpService.getFBPServiceSoap()); 
			org.apache.cxf.endpoint.Endpoint cxfEndpoint = client.getEndpoint(); 

			cxfEndpoint.getOutInterceptors().add(loi); 
			cxfEndpoint.getInInterceptors().add(lii);
*/			
			
			GetLenderStaffDataResult lenderStaffDataResult = 
					fbpService.getFBPServiceSoap().getLenderStaffData(sitename, username, passwdtext, passwddigest, arrayOfInt);
			
			if(logger.isDebugEnabled()){
				logger.debug("lenderStaffDataResult=" + lenderStaffDataResult);
			}
			
			LenderStaffData lenderStaffData = validate(inputCoreCustomerIDList, lenderStaffDataResult);
			
			if(lenderStaffData.getErrorMessage()==null)
			{
				return populateLenderStaffData(mapOfLenderStaffRecords,lenderStaffDataResult);
			}
			
			if(logger.isDebugEnabled()){
				logger.debug("lenderStaffData=" + lenderStaffData);
			}
			
			return lenderStaffData;

		} catch (Exception e) {
			if(recordsNotFound("getLenderStaffData()", inputCoreCustomerIDList, e)){
				return null;
			}else{
				throw new FBPConnectorException("Failed to call FBP Web Service: getLenderStaffData()", e);
			}
		}

	}

	/**
	 * @param inputCoreCustomerIDList
	 * @param lenderStaffDataResult
	 * @return
	 */
	private LenderStaffData validate(List<Integer> inputCoreCustomerIDList,
			 GetLenderStaffDataResult lenderStaffDataResult) {
		LenderStaffData lenderStaffData = new LenderStaffData();
		
		if(lenderStaffDataResult==null)
		{
			String msg = "Unexpected issue. lenderStaffDataResult is null for inputCoreCustomerIDList:"+inputCoreCustomerIDList;
			logger.error(msg);
			lenderStaffData.setErrorMessage(msg);
			return lenderStaffData;
		}
		ArrayOfVendorClient arrayOfVendorClient = lenderStaffDataResult.getVendorClientList();
		List<VendorClient> vendorClientList = null;
		if(arrayOfVendorClient!=null)
		{
			vendorClientList =   arrayOfVendorClient.getVendorClient();
		}
		if(lenderStaffDataResult.getWarning()!=null && (vendorClientList==null || vendorClientList.isEmpty()))
		{
			String msg = "FBP error occurred for inputCoreCustomerIDList:"+inputCoreCustomerIDList+" message:"+lenderStaffDataResult.getWarning();
			logger.error(msg);
			lenderStaffData.setErrorMessage(msg);
			return lenderStaffData;
		}
		if(vendorClientList==null || vendorClientList.isEmpty())
		{
			String msg = "vendorClientList is null or empty (i.e. these CCIDs may not exist in FBP) for inputCoreCustomerIDList:"+inputCoreCustomerIDList;
			logger.warn(msg);
			lenderStaffData.setErrorMessage(msg);
			return lenderStaffData;
		}
		if(lenderStaffDataResult.getWarning()!=null)
		{
			logger.warn("FBP warning for inputCoreCustomerIDList:"+inputCoreCustomerIDList+" message:"+lenderStaffDataResult.getWarning());
		}
		return lenderStaffData;
	}
	
	/**
	 * @param mapOfLenderStaffRecords
	 * @param lenderStaffDataResult
	 * @return
	 */
	private LenderStaffData populateLenderStaffData(Map<Integer, List<LenderStaff>> mapOfLenderStaffRecords,
			GetLenderStaffDataResult lenderStaffDataResult) {
		
		LenderStaffData lenderStaffData = new LenderStaffData();
		ArrayOfVendorClient arrayOfVendorClient = lenderStaffDataResult.getVendorClientList();
		List<VendorClient> vendorClientList =   arrayOfVendorClient.getVendorClient();
		
		for(VendorClient vendorClient : vendorClientList)
		{
			List<LenderStaff> lenderStaffList = mapOfLenderStaffRecords.get(vendorClient.getCoreCustomerID());
			if(lenderStaffList!=null && lenderStaffList.isEmpty())
			{
				lenderStaffList = new ArrayList<LenderStaff>();
				ArrayOfLenderStaff arrayOfLenderStaff = vendorClient.getLenderStaffList();
				List<LenderStaff> staffList = arrayOfLenderStaff.getLenderStaff();
				if(staffList!=null && (!staffList.isEmpty()) )
				{
					for(LenderStaff staff : staffList)
					{
						LenderStaff lenderStaff = new LenderStaff();
						lenderStaff.setStaffMember(staff.getStaffMember());
						lenderStaff.setTitle(staff.getTitle());
						lenderStaff.setEmail(staff.getEmail());
						lenderStaff.setRole(staff.getRole());
						lenderStaffList.add(lenderStaff);
					}
					mapOfLenderStaffRecords.put(vendorClient.getCoreCustomerID(), lenderStaffList);
				}
			}
		}
		
		logMissingDataInfo(mapOfLenderStaffRecords);
		
		lenderStaffData.setMapOfLenderStaffRecords(mapOfLenderStaffRecords);
		
		if(logger.isDebugEnabled()){
			logger.debug("lenderStaffData=" + lenderStaffData);
		}
		
		return lenderStaffData;
	}

	/**
	 * @param mapOfLenderStaffRecords
	 */
	private void logMissingDataInfo(Map<Integer, List<LenderStaff>> mapOfLenderStaffRecords) {
		List<Integer> dataMissingForCCIDs = new ArrayList<Integer>();
		for(Integer coreCustomerID: mapOfLenderStaffRecords.keySet())
		{
			List<LenderStaff> lenderStaffList = mapOfLenderStaffRecords.get(coreCustomerID);
			if(lenderStaffList.isEmpty())
			{
				dataMissingForCCIDs.add(coreCustomerID);
			}
		}
		if(!dataMissingForCCIDs.isEmpty()) {
			logger.warn("CCID or lenderStaffData is missing in FBP for CCIDs:"+dataMissingForCCIDs);
		}
	}

	@Override
	public FLPRALoanServicingData getFLPRALoanServicingData() throws FBPConnectorException {
		return getFLPRALoanServicingData(fbpEndPointURL,username,passwdtext,passwddigest);
	}
	
	/**
	 * @param sitename
	 * @param username
	 * @param passwdtext
	 * @param passwddigest
	 * @return
	 * @throws MalformedURLException
	 * @throws JAXBException
	 */
	@Override
	public FLPRALoanServicingData getFLPRALoanServicingData(String fbpEndPointURL, 
			String username, String passwdtext, String passwddigest)
			throws FBPConnectorException {
		FBPService fbpService = createFBPServiceInstance();
		try {			
			GetFLPRALoanServicingDataResult dlmDataResult = 
					fbpService.getFBPServiceSoap().getFLPRALoanServicingData(username, passwdtext, 
							passwddigest);
			if(dlmDataResult==null){
				logger.warn("getFLPRALoanServicingData() - No records found (possibly) in FBP");
				return null;
			}

			List<Object> list = dlmDataResult.getContent();
			Object response = list.get(0);
			if (response instanceof JAXBElement) {
				JAXBElement<FLPRALoanServicingData> jaxbElement = (JAXBElement<FLPRALoanServicingData>) response;
				FLPRALoanServicingData flpraLoanServicingData = jaxbElement.getValue();
				if(logger.isDebugEnabled()){
					logger.debug("flpraLoanServicingData=" + flpraLoanServicingData);
				}
				return flpraLoanServicingData;
			}else{
				throw new JAXBException("getFLPRALoanServicingData() - Incorrect object type (Not JAXBElement): " + response.getClass());
			}
		} catch (Exception e) {
			throw new FBPConnectorException("Failed to call FBP Web Service: getFLPRALoanServicingData()", e);
		}	
	}
	@Override
	public boolean isHealthy() {
		try {
			createFBPServiceInstance();
			return true;
		}catch(FBPConnectorException ex) {
			logger.error("FBPServiceStaticClient.isHealth() check failed. See log for message of 'Failed on createFBPServiceInstance() for FBP Web Service.' ");
		}
		return false;
	}
	
	private FBPService createFBPServiceInstance() throws FBPConnectorException {
		FBPService fBPService = null;
		try {
			String fbpEndPointURL = JNDIUtil.lookUp(FBPWsdlInfo.FBP_INTERFACE_CONTEXT_JNDI);
			URL wsdlURL = getWsdlURL(fbpEndPointURL);
			fBPService = new FBPService(wsdlURL);
		}catch(Exception ex) {
			logger.error("Failed on createFBPServiceInstance() for FBP Web Service. " , ex);
			throw new FBPConnectorException("Connection to FBP Web Service failed..." + ex.getMessage());
		}
		return fBPService;
	}
	
	/**
	 * @param fbpEndPointURL
	 * @return
	 * @throws MalformedURLException
	 */
	private URL getWsdlURL(String fbpEndPointURL) throws MalformedURLException {
		if(logger.isDebugEnabled()){
			logger.debug("fbpEndPointURL="+fbpEndPointURL);
		}
		
		String wsdlURI = fbpEndPointURL;
		if(!fbpEndPointURL.endsWith("?wsdl"))
		{
			wsdlURI = fbpEndPointURL + "?wsdl";
		}
		if(logger.isDebugEnabled()){
			logger.debug("wsdlURI="+wsdlURI);
		}
		
		URL wsdlURL;
		try {
			wsdlURL = new URL(wsdlURI);
		} catch (MalformedURLException e) 
		{
			logger.error("MalformedURLException for wsdlURI="+wsdlURI);
			throw e;
		}
		return wsdlURL;
	}
	
	/**
	 * @param method
	 * @param corecustomerid
	 * @param exception
	 */
	private boolean recordsNotFound(String method, Integer corecustomerid, Exception exception){
		boolean recordNotFound = false;
		// JBoss EAP 5.x
		if(exception instanceof WebServiceException 
				&& exception.getMessage().contains("Cannot find child element")){ 
			recordNotFound = true;
		}
		// JBoss EAP 7.x
		else if(exception instanceof SOAPFaultException 
				&& exception.getMessage().contains("Response message did not contain proper response data")){
			recordNotFound = true;
		}		
		if(recordNotFound){
			// logger.error(method+" - No records found (possibly) in FBP for corecustomerid="+corecustomerid, exception);
			logger.error(method+" - No records found (possibly) in FBP for corecustomerid="+corecustomerid);
		}		
		return recordNotFound;
	}
	
	/**
	 * @param method
	 * @param corecustomerid
	 * @param exception
	 */
	private boolean recordsNotFound(String method, List<Integer> coreCustomerIDList, Exception exception){
		boolean recordNotFound = false;
		// JBoss EAP 5.x
		if(exception instanceof WebServiceException 
				&& exception.getMessage().contains("Cannot find child element")){ 
			recordNotFound = true;
		}
		// JBoss EAP 7.x
		else if(exception instanceof SOAPFaultException 
				&& exception.getMessage().contains("Response message did not contain proper response data")){
			recordNotFound = true;
		}		
		if(recordNotFound){
			// logger.error(method+" - No records found (possibly) in FBP for corecustomerid="+corecustomerid, exception);
			logger.error(method+" - No records found (possibly) in FBP for coreCustomerIDList="+coreCustomerIDList);
		}		
		return recordNotFound;
	}
		
	/**
	 * @param args
	 * 
	 * Works with Apache CXF WS implementation.
	 * 
	 * This may not work with SUN JAX-WS implementation. SUN JAX-WS implementation does not work due to FBP wsdl being not WS-I Compatible but it will work fine on jboss 5 and jboss 7 runtime.  
	 * Error message will be something like this: com.sun.xml.internal.ws.model.RuntimeModelerException: runtime modeler error: SEI gov.usda.fsa.fcao.flpids.fbpservice.jaxws.FBPServiceSoap has method 
	 * getDLMYEAData annotated as BARE but it has more than one parameter bound to body. This is invalid. Please annotate the method with 
	 * annotation: @SOAPBinding(parameterStyle=SOAPBinding.ParameterStyle.WRAPPED)
	 * 
	 */
//	public static void main(String[] args) {
//		try {			
//			FBPServiceStaticClient fbpClient = new FBPServiceStaticClient();
//			
//			if(logger.isDebugEnabled()){
//				logger.debug("test isHealthy() "+ fbpClient.isHealthy());
//			}
//			
//			DLMData dlmData = fbpClient.getDLMData(
//							"https://wem.cert.sc.egov.usda.gov/gateway/FBPService.asmx?wsdl",
//							"test1.onlinequity.com", "FBP_FLPIDS_SOAP",
//							"T*sting8", "0F78E6E616FF684D544387C0F5DC1DDB",
//							9349434);
//			if(logger.isDebugEnabled()){
//				logger.debug("dlmData="+dlmData);
//			}
//			dlmData = fbpClient.getDLMYEAData(
//					"https://wem.cert.sc.egov.usda.gov/gateway/FBPService.asmx?wsdl",
//					"test1.onlinequity.com", "FBP_FLPIDS_SOAP",
//					"T*sting8", "0F78E6E616FF684D544387C0F5DC1DDB",
//					9349434);
//			if(logger.isDebugEnabled()){
//				logger.debug("dlmYeaData="+dlmData);
//			}
//			
//			DALRData darlData = fbpClient.getDALRData(
//					"https://wem.cert.sc.egov.usda.gov/gateway/FBPService.asmx?wsdl",
//					"test1.onlinequity.com", "FBP_FLPIDS_SOAP",
//					"T*sting8", "0F78E6E616FF684D544387C0F5DC1DDB",
//					1432871);
//			if(logger.isDebugEnabled()){
//				logger.debug("darlData="+darlData);
//			}			
//			// No records found for CCID=1536109
//			darlData = fbpClient.getDALRData(
//					"https://wem.cert.sc.egov.usda.gov/gateway/FBPService.asmx?wsdl",
//					"test1.onlinequity.com", "FBP_FLPIDS_SOAP",
//					"T*sting8", "0F78E6E616FF684D544387C0F5DC1DDB",
//					1536109);
//			if(logger.isDebugEnabled()){
//				logger.debug("darlData="+darlData);
//			}
//		} catch (Exception e) {
//			logger.error("Failed:",e);
//		} 
//	}

}
