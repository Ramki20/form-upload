
package gov.usda.fsa.fcao.flpids.fbpservice.jaxws;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 * FBPService Static Client
 */
@WebServiceClient(name = "FBPService", targetNamespace = FBPWsdlInfo.FBP_NAMESPACE_URI, wsdlLocation = "https://wem.dev.sc.egov.usda.gov/gateway/fbpservice.asmx?wsdl")
public class FBPService
    extends Service
{

    private static final  URL FBPSERVICE_WSDL_LOCATION;
	private static final Logger logger = LogManager.getLogger(FBPService.class);
	private static FBPServiceSoap fbpServiceSoap = null;
    

    static {
        URL fbpUrl = null;
        try {
			String fbpEndPointURL = JNDIUtil.lookUp(FBPWsdlInfo.FBP_INTERFACE_CONTEXT_JNDI);
            fbpUrl = new URL(fbpEndPointURL+"?wsdl");
        } catch (MalformedURLException e) {
            logger.error("Failed to create URL for the wsdl Location: '"+fbpUrl+"', retrying as a local file");
            logger.error(e.getMessage());
        }
        FBPSERVICE_WSDL_LOCATION = fbpUrl;
        logger.info("FBPSERVICE_WSDL_LOCATION="+FBPSERVICE_WSDL_LOCATION);
    }


    public FBPService() {
        super(FBPSERVICE_WSDL_LOCATION, new QName(FBPWsdlInfo.FBP_NAMESPACE_URI, FBPWsdlInfo.FBP_SERVICE_NAME));
    }
    
    public FBPService(URL wsdlLocation) {
        super(wsdlLocation, new QName(FBPWsdlInfo.FBP_NAMESPACE_URI, FBPWsdlInfo.FBP_SERVICE_NAME));
    }
    
    public FBPService(FBPWsdlInfo fbpWsdlInfo) {
        super(fbpWsdlInfo.getWsdlLocation(), new QName(FBPWsdlInfo.FBP_NAMESPACE_URI, FBPWsdlInfo.FBP_SERVICE_NAME));
    }
    
    /**
     * 
     * @return
     *     returns FBPServiceSoap
     */
    @WebEndpoint(name = "FBPServiceSoap")
    public FBPServiceSoap getFBPServiceSoap() {
    	if(fbpServiceSoap == null)
    	{
    		logger.info("Getting FBP WS port instance - Start");
    		fbpServiceSoap = super.getPort(new QName(FBPWsdlInfo.FBP_NAMESPACE_URI, FBPWsdlInfo.FBP_SERVICE_PORT_NAME), FBPServiceSoap.class);
    		logger.info("Getting FBP WS port instance was successful. fbpServiceSoap="+fbpServiceSoap);
    	}
        return fbpServiceSoap;
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns FBPServiceSoap
     */
    @WebEndpoint(name = "FBPServiceSoap")
    public FBPServiceSoap getFBPServiceSoap(WebServiceFeature... features) {
    	if(fbpServiceSoap == null)
    	{
    		logger.info("Getting FBP WS port instance - Start");
    		fbpServiceSoap = super.getPort(new QName(FBPWsdlInfo.FBP_NAMESPACE_URI, FBPWsdlInfo.FBP_SERVICE_PORT_NAME), FBPServiceSoap.class, features);
    		logger.info("Getting FBP WS port instance was successful. fbpServiceSoap="+fbpServiceSoap);
    	}
        return fbpServiceSoap;
    }

}
